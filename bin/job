#!/usr/bin/python
"""Jobb - better job.

Usage:
  job
  job create PROJECT [TYPE ASSET] [--log-level=INFO --root=prefix --no-local-schema]
  job set [PROJECT TYPE ASSET] [--rez=<rez-packages>...] [--log-level=INFO --root=prefix]
  job archive PROJECT 
  job read PROJECT  (asset|shot) [FIELDS...]
  job write PROJECT (asset|shot) [FIELDS...]
  job (-h | --help)
  job --version


Options:
                        No options -> "job set sandbox user $USER"
  -h --help             Show this screen.
  --version             Show version.
  --log-level=<level>   Log level of subcommands (INFO | DEBUG) [default: INFO]
  --no-local-schema     Disable savig/loading local copy of schema on 'create' 
  --root=<prefix>       Overrides root directory (only for debuging purposes!) 
"""

import sys
from os.path import realpath, dirname, join, exists

# Get root directory
job_root_path = dirname(realpath(__file__))
job_root_path = dirname(job_root_path)
local_docopt_path     = join(job_root_path, "docopt")
local_schematics_path = join(job_root_path, "schematics")
sys.path = [job_root_path] + sys.path
sys.path += [local_docopt_path, local_schematics_path]


# Make sure we can import main module
try:
    import job.cli
    from docopt import docopt
except ImportError, error:
    print error
    raise


def get_sub_command(options):
    """ Gets a command.module.Class which coresponds to docopt
        subcommand (first argument).

        Params:
            options - dictionary of command line options
                      as returned by docopt.
        Returns:
            Class object from command.module (not initilized).
    
        CLI setup based on https://stormpath.com/blog/\
        building-simple-cli-interfaces-in-python
    """
    import commands
    from commands.base import BaseSubCommand
    from inspect import getmembers, isclass
    subcommand = None  
    for k, v in options.iteritems():
        if not hasattr(commands, k) or not v:
          continue
        module = getattr(commands, k) 
        candidates = [cls[1] for cls in getmembers(module, isclass)]
        # We are only interested in classes derived from Base:
        subcommand = [cls for cls in candidates if issubclass(cls, BaseSubCommand) \
                      and cls != BaseSubCommand][0]
        return subcommand
    return
    
def main():
    from job.utils import setup_logger
    logger = setup_logger("Job")
    cli_options = docopt(__doc__, version='job version 0.0.1')
    command = get_sub_command(cli_options)
    logger.debug("Command found %s", command)

    if not command:
        return

    command = command(cli_options)
    command.run()


if __name__ == "__main__": main()
